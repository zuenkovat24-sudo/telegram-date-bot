import os
import re
import logging
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
logging.basicConfig(level=logging.INFO)
DATE_FORMAT = "%d.%m.%Y"
SPREADSHEET_ID = "1QzDByPjicYRB4csPMui86twJo8zcg5Ohq7KZDs5Yccg"
ADMIN_GROUP_ID = -1002925585648

# === GOOGLE SHEETS ===
def get_sheet():
    scopes = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = Credentials.from_service_account_file("service_account.json", scopes=scopes)
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(SPREADSHEET_ID)
    return sh.sheet1

# === –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ê –î–ê–¢–´ ===
def is_valid_date(text: str) -> bool:
    if not re.fullmatch(r"\s*\d{2}\.\d{2}\.\d{4}\s*", text):
        return False
    try:
        datetime.strptime(text.strip(), DATE_FORMAT)
        return True
    except ValueError:
        return False

# === –ö–û–ú–ê–ù–î–ê /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è /start"""
    await update.message.reply_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2025"
    )

# === –ü–†–û–í–ï–†–ö–ê –î–ê–¢–´ ===
async def check_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user = update.message.from_user
    username = f"@{user.username}" if user.username else user.full_name

    if not is_valid_date(text):
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä 05.11.2025)"
        )
        return

    date_str = datetime.strptime(text, DATE_FORMAT).strftime(DATE_FORMAT)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ Google Sheets
    try:
        sheet = get_sheet()
        dates = sheet.col_values(1)
        booked = set(d.strip() for d in dates[1:] if d.strip())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ.")
        return

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if date_str in booked:
        user_reply = (
            f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞—Ç–∞ {date_str} —É–∂–µ –∑–∞–Ω—è—Ç–∞.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º: "
            "[vk.me/vostorg_dzr](https://vk.me/vostorg_dzr)"
        )
        status = "‚ùå –ó–ê–ù–Ø–¢–ê"
    else:
        user_reply = (
            f"‚úÖ –î–∞—Ç–∞ {date_str} —Å–≤–æ–±–æ–¥–Ω–∞!\n"
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–Ω–∫–µ—Ç—É:\n"
            "[–û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∫–µ—Ç—É](https://vk.com/app5619682_-220942261#713509)\n\n"
            "–õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
            "–í–ö: [https://vk.me/vostorg_dzr](https://vk.me/vostorg_dzr)\n"
            "–¢–ì: @TelkovaSvetlana\n\n"
            "_P.S.: –ï—Å–ª–∏ –º—ã —Å –≤–∞–º–∏ –Ω–µ —Å–≤—è–∑—ã–≤–∞–µ–º—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å —Å—Ç–æ–∏—Ç –∑–∞–ø—Ä–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è._\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –ø–µ—Ä–≤—ã–º–∏ üí¨"
        )
        status = "‚úÖ –°–í–û–ë–û–î–ù–ê"

    await update.message.reply_text(user_reply, parse_mode="Markdown")

    # === –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –í –ì–†–£–ü–ü–£ –ê–î–ú–ò–ù–û–í ===
    try:
        # üîó –ï—Å–ª–∏ –µ—Å—Ç—å username ‚Äî –¥–µ–ª–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        if user.username:
            contact_link = f"[{username}](https://t.me/{user.username})"
        else:
            # –ï—Å–ª–∏ username –Ω–µ—Ç, —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∏ ID
            contact_link = f"{user.full_name} (ID: `{user.id}`)"

        now = datetime.now().strftime("%d.%m.%Y %H:%M")

        admin_message = (
            "üì© *–ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã!*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {contact_link}\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            f"üïí –í—Ä–µ–º—è: {now}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}"
        )

        await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=admin_message,
            parse_mode="Markdown"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤: {e}")

# === –¢–û–ß–ö–ê –í–•–û–î–ê ===
def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: set BOT_TOKEN=–í–ê–®_–¢–û–ö–ï–ù")

    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_date))

    print("ü§ñ Bot is running...")
    app.run_polling(close_loop=False)
from flask import Flask
from threading import Thread

app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive!"

def run_web():
    app.run(host='0.0.0.0', port=10000)

def keep_alive():
    t = Thread(target=run_web)
    t.start()   

if __name__ == "__main__":
    main()



